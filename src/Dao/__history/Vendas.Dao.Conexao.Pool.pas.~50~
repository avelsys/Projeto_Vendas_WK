unit Vendas.Dao.Conexao.Pool;

interface

uses
  System.SysUtils,
  System.Types,
  System.IniFiles,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Phys,
  FireDAC.Comp.Client,
  FireDAC.Comp.DataSet,

  //Mysql
  FireDAC.Phys.MySQLDef,
  FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLWrapper,
  Vendas.Model.Conexao;

const
  csNOME_ARQUIVO_CONFIG_CONEXAO = 'config.ini';
  csBASE_DRIVER_ID_FIREBIRD     = 'BaseDriverID';
  csVENDOR_LIB                  = 'VendorLib';

  csNOME_CONEXAO   = 'MYSQL_CONNECTION';
  csHOSTNAME       = 'localhost';
  csDATABASE       = 'DBVendas';
  csUSER           = 'root';
  csPASSWORD       = '12936511';
  csDRIVER_CONEXAO = 'MYSQL_CONN';
  csDRIVER         = 'MYSQL';
  csVENDOR_LIBRARY = 'D:\projetos\ProjetoVendas_WK\bin\debug\libmariadb.dll';

type
  TVendasDaoConexaoPool = class(TInterfacedObject, iConexaoPool)
  protected
    constructor Create;
  private
    FNomeConexao: string;
    FNomeLocal: string;
    FNomeBanco: string;
    FUsuario: string;
    FSenha: string;
    FNomeDriver: string;
    FDriver: string;
    FBibliotecaEndereco: string;
    FConexao: TFDConnection;
    function ConfigurarConexao(
      const AConnectionDefDriverParams: TConnectionDefDriverParams;
      const AParametrosConexao: TConnectionDefParams;
      const AConnectionDefPoolParams: TConnectionDefPoolParams): iConexaoPool; overload;
    procedure MontarConexao;
    procedure DefinirParametroConexaoMysql(
      AParametrosConexao: TConnectionDefParams;
      AConnectionDefDriverParams: TConnectionDefDriverParams;
      AFDStanConnectionDef: IFDStanConnectionDef;
      AConnectionDefPoolParams: TConnectionDefPoolParams);
    procedure ConfiguarDadosConexao;
    procedure PegarArquivoConfiguracao(var AArquivoConfig: TIniFile);
    function GetNomeConexao: string;
    function GetBibliotecaEndereco: string;
    function GetDriver: string;
    function GetNomeBanco: string;
    function GetNomeDriver: string;
    function GetNomeLocal: string;
    function Getusuario: string;
    function GetSenha: string;

  public
    destructor Destroy; override;
    class function New: iConexaoPool;
    function SetarConexao(out AQuery: TFDQuery): iConexaoPool;
    function PegarConexao: TFDConnection;
    function IsConnected: Boolean;

    property nomeconexao: string read GetNomeConexao;
    property NomeLocal: string read GetNomeLocal;
    property NomeBanco: string read GetNomeBanco;
    property Usuario: string read Getusuario;
    property Senha: string read  GetSenha;
    property NomeDriver: string read GetNomeDriver;
    property Driver: string read GetDriver;
    property BibliotecaEndereco: string read GetBibliotecaEndereco;

  end;

implementation

constructor TVendasDaoConexaoPool.Create;
begin
  ConfiguarDadosConexao;
  MontarConexao;
end;

procedure TVendasDaoConexaoPool.MontarConexao;
var
  LConnectionDefDriverParams: TConnectionDefDriverParams;
  LConnectionDefParams: TConnectionDefParams;
  LConnectionDefPoolParams: TConnectionDefPoolParams;
begin

  LConnectionDefDriverParams.DriverDefName := FDriver;

  if not FBibliotecaEndereco.IsEmpty then
    if not FileExists(FBibliotecaEndereco) then
      raise Exception.Create(format('A Dll [%s] da biblioteca de conexao não foi encontrada neste caminho.',[FBibliotecaEndereco]))
    else
      LConnectionDefDriverParams.VendorLib := FBibliotecaEndereco;

  LConnectionDefParams.ConnectionDefName      := FNomeConexao;
  LConnectionDefParams.Server                 := FNomeLocal;
  LConnectionDefParams.Database               := FNomeBanco;
  LConnectionDefParams.UserName               := Fusuario;
  LConnectionDefParams.Password               := FSenha;
  LConnectionDefParams.LocalConnection        := True;

  LConnectionDefPoolParams.Pooled             := true;
  LConnectionDefPoolParams.PoolMaximumItems   := 50;
  LConnectionDefPoolParams.PoolCleanupTimeout := 30000;
  LConnectionDefPoolParams.PoolExpireTimeout  := 60000;

  ConfigurarConexao(LConnectionDefDriverParams,
                    LConnectionDefParams,
                    LConnectionDefPoolParams);

  FConexao := TFDConnection.Create(nil);
end;

procedure TVendasDaoConexaoPool.ConfiguarDadosConexao;
var
  LArquivoConfig: TIniFile;
begin
  PegarArquivoConfiguracao(LArquivoConfig);
  try
    FNomeConexao        := LArquivoConfig.ReadString('CONEXAO', 'nome_conexao' , csNOME_CONEXAO);
    FNomeLocal          := LArquivoConfig.ReadString('CONEXAO', 'local'        , csHOSTNAME);
    FNomeBanco          := LArquivoConfig.ReadString('CONEXAO', 'banco'        , csDATABASE);
    FUsuario            := LArquivoConfig.ReadString('CONEXAO', 'usuario'      , csUSER);
    FSenha              := LArquivoConfig.ReadString('CONEXAO', 'senha'        , csPASSWORD);
    FNomeDriver         := LArquivoConfig.ReadString('CONEXAO', 'nome_driver'  , csDRIVER_CONEXAO);
    FDriver             := LArquivoConfig.ReadString('CONEXAO', 'driver'       , csDRIVER);
    FBibliotecaEndereco := LArquivoConfig.ReadString('CONEXAO', 'biblioteca'   , csVENDOR_LIBRARY);
  finally
    LArquivoConfig.DisposeOf;
  end;
end;

procedure TVendasDaoConexaoPool.PegarArquivoConfiguracao(var AArquivoConfig: TIniFile);
begin
  AArquivoConfig := TIniFile.Create(format('%s\%s', [GetCurrentDir, csNOME_ARQUIVO_CONFIG_CONEXAO]));
end;

function TVendasDaoConexaoPool.ConfigurarConexao(
      const AConnectionDefDriverParams: TConnectionDefDriverParams;
      const AParametrosConexao: TConnectionDefParams;
      const AConnectionDefPoolParams: TConnectionDefPoolParams): iConexaoPool;
var
  LConnection: TFDCustomConnection;
  LFDStanConnectionDef: IFDStanConnectionDef;
  LFDStanDefinition: IFDStanDefinition;
begin
  Result := Self;
  FDManager.CloseConnectionDef(AParametrosConexao.ConnectionDefName);
  FDManager.ActiveStoredUsage := [auRunTime];
  FDManager.ConnectionDefFileAutoLoad := False;
  FDManager.DriverDefFileAutoLoad := False;
  FDManager.SilentMode := True;

  LFDStanDefinition := FDManager.DriverDefs.FindDefinition(AConnectionDefDriverParams.DriverDefName);
  if not Assigned(FDManager.DriverDefs.FindDefinition(AConnectionDefDriverParams.DriverDefName)) then
  begin
    LFDStanDefinition := FDManager.DriverDefs.Add;
    LFDStanDefinition.Name := AConnectionDefDriverParams.DriverDefName;
  end;
  LFDStanDefinition.AsString[csBASE_DRIVER_ID_FIREBIRD] := FDriver;
  if not AConnectionDefDriverParams.VendorLib.Trim.IsEmpty then
    LFDStanDefinition.AsString[csVENDOR_LIB] := AConnectionDefDriverParams.VendorLib;

  LFDStanConnectionDef := FDManager.ConnectionDefs.FindConnectionDef(AParametrosConexao.ConnectionDefName);
  if not Assigned(FDManager.ConnectionDefs.FindConnectionDef(AParametrosConexao.ConnectionDefName)) then
  begin
    LFDStanConnectionDef := FDManager.ConnectionDefs.AddConnectionDef;
    LFDStanConnectionDef.Name := AParametrosConexao.ConnectionDefName;
  end;

  DefinirParametroConexaoMysql(AParametrosConexao,
                               AConnectionDefDriverParams,
                               LFDStanConnectionDef,
                               AConnectionDefPoolParams);

  LConnection := TFDCustomConnection.Create(nil);
  try
    LConnection.FetchOptions.Mode := TFDFetchMode.fmAll; //fmAll
    LConnection.ResourceOptions.AutoConnect := False;

    with LConnection.FormatOptions.MapRules.Add do
    begin
      SourceDataType := dtDateTime; { TFDParam.DataType }
      TargetDataType := dtDateTimeStamp; { Firebird TIMESTAMP }
    end;

    LFDStanConnectionDef.WriteOptions(LConnection.FormatOptions,
                                      LConnection.UpdateOptions,
                                      LConnection.FetchOptions,
                                      LConnection.ResourceOptions);
  finally
    LConnection.Free;
  end;

  if (FDManager.State <> TFDPhysManagerState.dmsActive) then
    FDManager.Open;

end;

destructor TVendasDaoConexaoPool.Destroy;
begin
  FConexao.DisposeOf;
  inherited;
end;

function TVendasDaoConexaoPool.GetBibliotecaEndereco: string;
begin
  result := FBibliotecaEndereco;
end;

function TVendasDaoConexaoPool.GetDriver: string;
begin
  result := FDriver;
end;

function TVendasDaoConexaoPool.GetNomeBanco: string;
begin
  result := FNomeBanco;
end;

function TVendasDaoConexaoPool.GetNomeConexao: string;
begin
  result := FNomeConexao;
end;

function TVendasDaoConexaoPool.GetNomeDriver: string;
begin
  result := FNomeDriver;
end;

function TVendasDaoConexaoPool.GetNomeLocal: string;
begin
  result := FNomeLocal;
end;

function TVendasDaoConexaoPool.GetSenha: string;
begin
  result := FSenha;
end;

function TVendasDaoConexaoPool.Getusuario: string;
begin
  result := FUsuario;
end;

function TVendasDaoConexaoPool.IsConnected: Boolean;
var
  LFDConnection: TFDConnection;
begin
  LFDConnection := TFDConnection.Create(nil);
  try
    LFDConnection.ConnectionDefName := FNomeConexao;
    LFDConnection.Connected         := True;
    Result := LFDConnection.Connected;
  finally
    LFDConnection.Free;
  end;
end;

procedure TVendasDaoConexaoPool.DefinirParametroConexaoMysql(
      AParametrosConexao: TConnectionDefParams;
      AConnectionDefDriverParams: TConnectionDefDriverParams;
      AFDStanConnectionDef: IFDStanConnectionDef;
      AConnectionDefPoolParams: TConnectionDefPoolParams);
var
  LPGConnectionDefParams: TFDPhysMySQLConnectionDefParams;
begin
  LPGConnectionDefParams := TFDPhysMySqlConnectionDefParams(AFDStanConnectionDef.Params);
  LPGConnectionDefParams.DriverID := AConnectionDefDriverParams.DriverDefName;
  LPGConnectionDefParams.Database := AParametrosConexao.Database;
  LPGConnectionDefParams.UserName := AParametrosConexao.UserName;
  LPGConnectionDefParams.Password := AParametrosConexao.Password;
  LPGConnectionDefParams.Server := AParametrosConexao.Server;

  LPGConnectionDefParams.Pooled := AConnectionDefPoolParams.Pooled;
  LPGConnectionDefParams.PoolMaximumItems := AConnectionDefPoolParams.PoolMaximumItems;
  LPGConnectionDefParams.PoolCleanupTimeout := AConnectionDefPoolParams.PoolCleanupTimeout;
  LPGConnectionDefParams.PoolExpireTimeout := AConnectionDefPoolParams.PoolExpireTimeout;
end;

class function TVendasDaoConexaoPool.New : iConexaoPool;
begin
  Result := Self.Create;
end;

function TVendasDaoConexaoPool.PegarConexao: TFDConnection;
begin
  result := FConexao;
end;

function TVendasDaoConexaoPool.SetarConexao(out AQuery: TFDQuery): iConexaoPool;
begin
  Result := Self;
  AQuery.Connection                   := FConexao;
  AQuery.Connection.ConnectionDefName := FNomeConexao;
end;

end.
