unit Vendas.Model.BaseCadastro;

interface

uses
  System.Generics.Collections,
  Vcl.ActnList,
  Vcl.ComCtrls,
  Vcl.Forms,
  Data.DB,
  Vcl.DBCtrls, Vcl.Controls;

type
  TTipoAcao      = (taBrowse, taNovo, taEditar, taExcluir, taGravar, taCancelar, taSair);
  TArrayAcao     = Set of TTipoAcao;

const
  csTipoAcaoDescricao: array[TTipoAcao] of String = ('Listagem','Novo', 'Editar',
                                                    'Excluir','Gravar','Cancelar','Sair');

  csVizualizacao = [taBrowse,  taExcluir, taGravar, taCancelar];
  csEdicao       = [taNovo, taEditar, taExcluir];
  csModEdicao    = [taBrowse, taGravar, taExcluir, taCancelar];
  csModPersisten = [taNovo, taEditar];

type
  TDicionarioAcoes           = TDictionary<TTipoAcao,TAction>;
  TDicionarioTabSheets       = TDictionary<TArrayAcao,TTabSheet>;
  TDicionarioDataSource      = TDictionary<string,TDataSource>;
  TDicionarioControle        = TDictionary<Tframe,TDataSource>;

  TNotifyEventAuxiliar       = procedure(Sender: TObject; Lista: TDicionarioDataSource) of object;

  TDadosFrame = record
    Acao: TTipoAcao;
    Tabela: string;
    Campo: string;
    TipoDado: TFieldType;
    Valor: Variant;
  end;

  TDBLabeledEditHelper = class helper for TDBLabeledEdit
    class var
    FOnExitAuxiliar: TNotifyEventAuxiliar;
    FListaDataSource: TDicionarioDataSource;
  private
    class procedure DoExit; override;
    procedure DoExitAuxiliar;
    function GetOnExitAuxiliar: TNotifyEventAuxiliar;
    procedure SetOnExitAuxiliar(const Value: TNotifyEventAuxiliar);
    function GetListaDataSource: TDicionarioDataSource;
    procedure SetListaDataSource(const Value: TDicionarioDataSource);
  public
    property ListaDataSource: TDicionarioDataSource read GetListaDataSource write SetListaDataSource;
    property OnExitAuxiliar: TNotifyEventAuxiliar read GetOnExitAuxiliar write SetOnExitAuxiliar;
  end;

  TDadosLista        = TList<TDadosFrame>;
  TDadosColecao      = TDictionary<variant,TDadosLista>;
  TNumericFieldClass = class of TField;


  iModelBaseCadastro         = interface;
  TRotinaGravaAutomatico     = reference to function: iModelBaseCadastro;

  iModelBaseCadastro = interface
    ['{AD0F9E33-AE8B-4E76-A8F0-6DFFAF390D3C}']
    /// <summary>
    ///   Função que inicia uma ação do tipo TTipoAcao.
    /// </summary>
    /// <param name="AAcao">
    ///   Parâmetro que instância uma ação no CRUD do tipo: taNovo, taEditar, taExcluir...
    /// </param>
    function IniciarAcao(const AAcao: TTipoAcao; AResetDados: Boolean = false): iModelBaseCadastro;
    /// <summary>
    ///   Set a função para gravar automaticamente os dados
    /// </summary>
    /// <param name="AProcedimento">
    ///   Rotina para controle da função gravar
    /// </param>
    function SetGravaAutomatico(AProcedimento: TRotinaGravaAutomatico):iModelBaseCadastro;
    /// <summary>
    ///   Captura a função de gravação
    /// </summary>
    function GetGravaAutomatico: TRotinaGravaAutomatico;
    /// <summary>
    ///   Captura o DataSource principal da tela
    /// </summary>
    function PegarDataSourcePrincpal: TDataSource;
    /// <summary>
    ///   Pegar Colecao de Dados vindo de um Frame Auxiliar
    /// </summary>
    function PegarColecaoDados: TDadosColecao;
  end;

implementation

{ TDBLabeledEditHelper }

procedure TDBLabeledEditHelper.DoExit;
begin
  DoExitAuxiliar;
  inherited;
end;

procedure TDBLabeledEditHelper.DoExitAuxiliar;
begin
  if Assigned(FOnExitAuxiliar) then FOnExitAuxiliar(Self, FListaDataSource);
end;

function TDBLabeledEditHelper.GetListaDataSource: TDicionarioDataSource;
begin
  Result :=  FListaDataSource;
end;

function TDBLabeledEditHelper.GetOnExitAuxiliar: TNotifyEventAuxiliar;
begin
  result := FOnExitAuxiliar;
end;

procedure TDBLabeledEditHelper.SetListaDataSource(
  const Value: TDicionarioDataSource);
begin
  FListaDataSource := Value;
end;

procedure TDBLabeledEditHelper.SetOnExitAuxiliar(
  const Value: TNotifyEventAuxiliar);
begin
  FOnExitAuxiliar := Value;
end;

end.
