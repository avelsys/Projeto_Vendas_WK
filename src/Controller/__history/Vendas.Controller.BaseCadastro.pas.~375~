unit Vendas.Controller.BaseCadastro;

interface

uses
  System.Classes,
  System.SysUtils,
  System.Variants,
  System.UITypes,
  Vcl.Forms,
  Vcl.DBGrids,
  Vcl.DBCtrls,
  Vcl.Controls,
  Vcl.Dialogs,
  Vcl.ActnList,
  Vcl.ComCtrls,
  Vcl.StdCtrls,
  Generics.Collections,
  RTTI,
  Data.DB,
  FireDAC.Comp.Client,
  FireDac.DApt,
  FireDac.Stan.Async,
  FireDac.Stan.Param,
  Vendas.Controller.Classes.Constantes,
  Vendas.Controller.Classes.BaseCadastroAtributo,
  Vendas.Model.BaseCadastro,
  Vendas.Model.Conexao,
  Vendas.View.Frame.Base,
  Vendas.Controller.Construtores, Winapi.Windows;

Type
  TNumericFieldClass = class of TField;
  TDicionarioDataSourceFrame = TDictionary<TframeBase,TDataSource>;

  TControllerVendaBaseCadastro = class(TInterfacedObject, IModelBaseCadastro)
  private
    FFormularioBase: TForm;
    FListaAcoes: TDicionarioAcoes;
    FListaTabSheets: TDicionarioTabSheets;
    FListaBaseFrames: TDicionarioDataSourceFrame;
    FpgPaginaBaseCadasro: TPageControl;
    FeAcaoAtual: TTipoAcao;
    FDataSourcePrincipal: TDataSource;
    FDataSetPrincipal: TFDQuery;
    FDBGrdListagem: TDBGrid;
    FbGeraEdits: Boolean;
    FTabelaNome: string;
    FChavePrimariaBasePrincipal: TField;
    FGravaAutomaticoProc: TRotinaGravaAutomatico;
    FAcoesBotoes: TActionList;
    FConexao: iConexao;
    FConstrutor: TVendasControlerConstrutores;
    FListaDataSource: TDicionarioDataSource;
    FClasseDataSetPrincipal: Tclass;
    /// <summary>
    /// Faz coleta dos atributos associados ao CRUD
    /// </summary>
    procedure ColetarAtributos;
    /// <summary>
    /// Faz coleta dos métodos para atribuir a eventos dos componentes edit como: OnExit, OnEnter...
    /// </summary>
    procedure ColetarMetodoEditAtributos;
    /// <summary>
    /// Faz o controle de botões de edição do crud
    /// </summary>
    procedure HabilitarBotoes;
    /// <summary>
    /// Seleciona página de trabalho conforme ação chamada
    /// </summary>
    procedure SelecionarPagina;
    /// <summary>
    /// Configura o controle da base de dados principal do CRUD
    /// </summary>
    procedure ConfigurarBasePrincipal;
    /// <summary>
    /// Configura as ações e opreações do crud pelo atributo
    /// </summary>
    procedure ConfiguraAtibutos(ARTTIField: TRttiField);
    /// <summary>
    /// Atribui o titulo ao formulário
    /// </summary>
    procedure AtribuirCaptionForm(const ACaptionForm: string);
    /// <summary>
    /// Gera os edits automáticos
    /// </summary>
    procedure CriarEditsAutomatico;
    /// <summary>
    /// Identifica e instancia a chave primária para controle
    /// </summary>
    procedure CapturaChavePrimaria;
    /// <summary>
    /// Contrutor do componente Edit
    /// </summary>
    procedure ConstruirEdit(APaginaCadastro: TTabSheet;
      ACampo: TField; var APosicaoTop, APosicaoLeft: Integer);
    /// <summary>
    /// Contrutor do componente CheckBox
    /// </summary>
    procedure ConstruirCheckBox(APaginaCadastro: TTabSheet;
      ACampo: TField; var APosicaoTop, APosicaoLeft: Integer);
    /// <summary>
    /// Atualiza posicionamento automático dos edits
    /// </summary>
    procedure AtualizarPosicaoEdits(AComponente: TComponent;
      APaginaCadastro: TTabSheet; var APosicaoLeft: Integer; var APosicaoTop: Integer);
    /// <summary>
    /// Atualiza posicionamento LEFT dos edits criados automáticamente
    /// </summary>
    procedure AtualizarPosicaoLeftEdit(AComponente: TComponent; var APosicaoLeft: Integer);
    /// <summary>
    /// Coleta os Frames com subtabelas para controle de informação
    /// </summary>
    procedure ColetarFrames;
    procedure PosicionarComponenteFormCadastro(AComponente: TComponent;
      APaginaCadastro: TTabSheet; var APosicaoLeft: Integer; var APosicaoTop: Integer);
    procedure CriarAcoesBotoes;
    function Cancelar: IModelBaseCadastro;
    procedure InjetarAcoesBotoes;
    procedure GravarNovoRegistro(ANomeTabela: string; ADataSet: TFDQuery);
    procedure GravarAlteracao(ANomeTabela: string; ADataSet: TFDQuery);
    procedure MontarParametroQuery(AQueryExec: TFDQuery; LField: TField);
    procedure PrepararParaExcluir;
    procedure Deletar;
    procedure OnStateUpdatePrincipal(Sender: TObject);
    procedure OnDBGrdListagemKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure OnDBGrdListagemKeyPress(Sender: TObject; var Key: Char);
  protected
    /// <summary>
    /// Seleciona uma célula no DBgrid para edição
    /// </summary>
    procedure SelecionarCelula(Sender: TObject);
    /// <summary>
    /// Grava um registro em edição
    /// </summary>
    function PrepararGravar: IModelBaseCadastro;
    /// <summary>
    ///  Varifica se o campo pode ser exibido
    /// </summary>
    /// <param name="AField">
    ///  O campo FIELD é passado como paramentro para ser verificado se tem visibilidade;
    /// </param>
    function ValidarCampoVisivel(const ANomeDoCampo: String): Boolean;
    /// <summary>
    ///  Cria o controle para os formulários
    /// </summary>
    /// <param name="AEmbedded">
    ///  Injeta a dependencia do Fromulário que fornececera as informações para a automação das ações
    /// </param>
    constructor create(AEmbedded: TForm);
    /// <summary>
    /// Grava um registro Automaticamento
    /// </summary>
    function GravarAutomatico: IModelBaseCadastro;
    /// <summary>
    ///  Cria uma lista com os eventos do CRUD
    /// </summary>
    property DataSetPrincipal: TFDQuery read FDataSetPrincipal write FDataSetPrincipal;
  public
    /// <summary>
    ///  Instancia o controle
    /// </summary>
    /// <param name="AEmbedded">
    ///  Injeta a dependencia do Fromulário que fornececera as informações para a automação das ações
    /// </param>
    class function New(AEmbedded: TForm): IModelBaseCadastro;
    function IniciarAcao(const AAcao: TTipoAcao; AResetDados: Boolean = false): IModelBaseCadastro;
    function SetGravaAutomatico(AProcedimento: TRotinaGravaAutomatico):IModelBaseCadastro;
    function GetGravaAutomatico: TRotinaGravaAutomatico;
    function PegarDataSourcePrincpal: TDataSource;
    function PegarColecaoDados: TDadosColecao;    
    destructor Destroy; override;
  end;

implementation

uses
  Vendas.Dao.Conexao.Mysql, Vendas.Controller.Classes.CriaEventosAnonimous;

{ TBaseCadstro }

class function TControllerVendaBaseCadastro.New(AEmbedded: TForm): IModelBaseCadastro;
begin
  Result := Self.Create(AEmbedded)
end;

procedure TControllerVendaBaseCadastro.OnStateUpdatePrincipal(Sender: TObject);
var
  LFrameSelecionado: TframeBase;
begin
  for LFrameSelecionado in FListaBaseFrames.Keys do
    LFrameSelecionado.ControllerFrame.IniciarAcao(taBrowse, true);
end;

constructor TControllerVendaBaseCadastro.create(AEmbedded: TForm);
begin
  FConexao              := TVencasDaoConexaoMySql.New;
  FFormularioBase      := AEmbedded;
  FConstrutor          := TVendasControlerConstrutores.Create(FFormularioBase,FConexao);
  FListaDataSource      := TDicionarioDataSource.Create;
  FDataSourcePrincipal := TDataSource.Create(FFormularioBase);
  FDataSetPrincipal    := TFDQuery.Create(FFormularioBase);
  FListaTabSheets      := TDicionarioTabSheets.Create;
  FListaBaseFrames     := TDicionarioDataSourceFrame.Create;
  ColetarAtributos;
  CriarAcoesBotoes;
  InjetarAcoesBotoes;
  FeAcaoAtual           := taBrowse;
  HabilitarBotoes;
  CapturaChavePrimaria;
  CriarEditsAutomatico;
  ColetarMetodoEditAtributos;
  ColetarFrames;
end;

procedure TControllerVendaBaseCadastro.CriarAcoesBotoes;
var
  LAcao: TAction;
  LItemAcao: TTipoAcao;
begin
  FListaAcoes  := TDicionarioAcoes.Create;
  FAcoesBotoes := TActionList.Create(FFormularioBase);
  for LItemAcao := Low(TTipoAcao) to High(TTipoAcao) do
  begin
    LAcao := TAction.Create(FAcoesBotoes);
    LAcao.Caption := csTipoAcaoDescricao[LItemAcao];
    case LItemAcao of
      taBrowse:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taBrowse);
                              Cancelar;
                           end);
      taNovo:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taNovo);
                              FDataSetPrincipal.Append;
                           end);
      taEditar:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taEditar);
                              FDataSetPrincipal.Edit;
                           end);
      taExcluir:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taExcluir);
                              PrepararParaExcluir;
                           end);
      taGravar:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taGravar);
                              PrepararGravar;
                           end);
      taCancelar:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taCancelar);
                              Cancelar;
                           end);
      taSair:
        LAcao.OnExecute := TCriaEventosAnonymous.Create(FFormularioBase,
                           procedure(Sender: TObject)
                           begin
                              IniciarAcao(taSair);
                              FFormularioBase.Close;
                           end);
    end;
    FListaAcoes.Add(LItemAcao, LAcao);
  end;
end;

destructor TControllerVendaBaseCadastro.Destroy;
begin

  if Assigned(FConstrutor) then
    FConstrutor.DisposeOf;

  if Assigned(FListaDataSource) then
    FListaDataSource.DisposeOf;

  if Assigned(FListaAcoes) then
    FListaAcoes.DisposeOf;

  if Assigned(FListaTabSheets) then
    FListaTabSheets.DisposeOf;

  if Assigned(FListaBaseFrames) then
    FListaBaseFrames.DisposeOf;

  inherited;
end;

procedure TControllerVendaBaseCadastro.PrepararParaExcluir;
begin
  if MessageDlg('Deseja excluir este item?', mtConfirmation,[mbYes,mbNo],0) = mrYes then
  begin
    Deletar;
    FDataSetPrincipal.Delete;
    HabilitarBotoes;
  end;
end;

procedure TControllerVendaBaseCadastro.MontarParametroQuery(AQueryExec: TFDQuery; LField: TField);
begin
  if LField.DataType = ftAutoInc then
    AQueryExec.ParamByName(LField.FieldName).DataType := ftInteger
  else
    AQueryExec.ParamByName(LField.FieldName).DataType := LField.DataType;
  AQueryExec.ParamByName(LField.FieldName).Value      := LField.Value;
end;

function TControllerVendaBaseCadastro.PegarColecaoDados: TDadosColecao;
begin
  result := nil;
end;

function TControllerVendaBaseCadastro.PegarDataSourcePrincpal: TDataSource;
begin
  result := FDataSourcePrincipal;
end;

procedure TControllerVendaBaseCadastro.PosicionarComponenteFormCadastro(AComponente: TComponent;
  APaginaCadastro: TTabSheet; var APosicaoLeft: Integer; var APosicaoTop: Integer);
var
  LComponent: TControl absolute AComponente;
begin
  AtualizarPosicaoEdits(LComponent, APaginaCadastro, APosicaoLeft, APosicaoTop);
  LComponent.Top              := APosicaoTop;
  LComponent.Left             := APosicaoLeft;
  LComponent.AlignWithMargins := True;
  LComponent.Margins.Top      := csMARGIN_TOP_EDIT;
  AtualizarPosicaoLeftEdit(LComponent, APosicaoLeft);
end;

function TControllerVendaBaseCadastro.PrepararGravar: IModelBaseCadastro;
begin
  try
    FConexao.AbreTransacao;
    if FDataSetPrincipal.State = dsInsert then
      GravarNovoRegistro(FTabelaNome, FDataSetPrincipal)
    else
      GravarAlteracao(FTabelaNome, FDataSetPrincipal);

    FConexao.Commit;
    FDataSetPrincipal.Post;
    HabilitarBotoes;
  Except On E:Exception do
    begin
      FConexao.Rollback;
      Cancelar;
      raise Exception.Create(format('Houve um erro: %s ',[e.Message]));
    end;
  end;
end;

procedure TControllerVendaBaseCadastro.GravarNovoRegistro(ANomeTabela: string;
  ADataSet: TFDQuery);
var
  LQueryExec: TFDQuery;
  LField: TField;
  LCammpos: TStringList;
  LValues: TStringList;
  LChavePrimaria: TField;
  LKeys: TframeBase;
  LControleFrame: iModelBaseCadastro;
  LKeysDados: String;
  LColecaoDadosFram: TDadosColecao;
begin
  LChavePrimaria:= nil;
  LQueryExec := TFDQuery.Create(nil);
  try
    FConexao.SetarConexao(LQueryExec);
    LCammpos:= TStringList.Create;
    try
      LValues := TStringList.Create;  
      try

        for LField in ADataSet.fields do
        begin
          if (pfInKey in LField.ProviderFlags) then
            LChavePrimaria := LField;

          if (pfInKey in LField.ProviderFlags) or
             (LField.FieldKind = fkLookup) then
            Continue;

          if LCammpos.Count = 0 then
          begin
            LCammpos.Add(LField.FieldName);
            LValues.Add(format(':%s',[LField.FieldName]));
          end else
          begin
            LCammpos.Add(format(', %s',[LField.FieldName]));
            LValues.Add(format(', :%s',[LField.FieldName]));
          end;
          LQueryExec.SQL.Text := format(csSCRIPT_INSERT,[ANomeTabela, LCammpos.Text, LValues.Text]);
          MontarParametroQuery(LQueryExec, LField);
        end;        
        LQueryExec.Prepare;
        LQueryExec.ExecSQL;

        LQueryExec.SQL.Clear;
        LQueryExec.SQL.Add(format(csSCRIPT_MAXIMO_ID,[LChavePrimaria.FieldName, ANomeTabela]));
        LQueryExec.Open;
        ADataSet.Edit;
        ADataSet.FieldByName(LChavePrimaria.FieldName).Value := LQueryExec.FieldList[0].AsInteger;

        if (FListaBaseFrames.Count > 0) then
        begin
          for LKeys in FListaBaseFrames.Keys do
          begin
            LControleFrame    := LKeys.ControllerFrame;
            Break;
          end;
          
          LColecaoDadosFram := LControleFrame.PegarColecaoDados;
          if (FListaBaseFrames.Count = 0) then
            Exit;
            
          for LKeysDados in LColecaoDadosFram.Keys do
          begin
            FConstrutor.GravarDadosFrame(LColecaoDadosFram[LKeysDados], LChavePrimaria, LQueryExec);
            LQueryExec.Prepare;
            LQueryExec.ExecSQL;
          end;
          LColecaoDadosFram.Clear;
        end;
      finally
        LValues.DisposeOf;
      end;      
    finally
      LCammpos.DisposeOf;
    end;
  finally
    LQueryExec.DisposeOf;
  end;
end;

procedure TControllerVendaBaseCadastro.GravarAlteracao(ANomeTabela: string;
  ADataSet: TFDQuery);
var
  LQueryExec: TFDQuery;
  LField: TField;
  LCammposEditados: TStringList;
  LCondicaoGravacao: TStringList;
  LChavePrimaria: TField;
  LKeys: TframeBase;
  LControleFrame: iModelBaseCadastro;
  LKeysDados: String;
  LColecaoDadosFram: TDadosColecao;
begin
  LField := nil;
  LChavePrimaria:= LField;
  LQueryExec := TFDQuery.Create(nil);
  try
    FConexao.SetarConexao(LQueryExec);
    LCammposEditados:= TStringList.Create;
    try
      LCondicaoGravacao := TStringList.Create;
      try
        for LField in ADataSet.fields do
        begin
          if (pfInKey in LField.ProviderFlags) then
          begin
            LChavePrimaria := LField;
            continue;
          end;

          if (pfInKey in LField.ProviderFlags) or
             (LField.FieldKind = fkLookup) then
            Continue;

          if LCammposEditados.Count = 0 then
            LCammposEditados.Add(format('%s = :%s',[LField.FieldName, LField.FieldName]))
          else
            LCammposEditados.Add(format(', %s = :%s',[LField.FieldName, LField.FieldName]));

          LQueryExec.SQL.Text := format(csSCRIPT_UPDATE,[ANomeTabela, LCammposEditados.Text, LCondicaoGravacao.Text]);
          MontarParametroQuery(LQueryExec, LField);
        end;
        LCondicaoGravacao.Add(format(' %s = :%s ',[LChavePrimaria.FieldName, LChavePrimaria.FieldName]));
        LQueryExec.SQL.Text := format(csSCRIPT_UPDATE,[ANomeTabela, LCammposEditados.Text, LCondicaoGravacao.Text]);
        MontarParametroQuery(LQueryExec, LChavePrimaria);
        LQueryExec.Prepare;
        LQueryExec.ExecSQL;

        if (FListaBaseFrames.Count > 0) then
        begin
          for LKeys in FListaBaseFrames.Keys do
          begin
            LControleFrame    := LKeys.ControllerFrame;
            Break;
          end;

          LColecaoDadosFram := LControleFrame.PegarColecaoDados;
          if (FListaBaseFrames.Count = 0) then
            Exit;

          for LKeysDados in LColecaoDadosFram.Keys do
          begin
            FConstrutor.GravarDadosFrame(LColecaoDadosFram[LKeysDados], LChavePrimaria, LQueryExec);
            LQueryExec.Prepare;
            LQueryExec.ExecSQL;
          end;
          LColecaoDadosFram.Clear;
        end;

      finally
        LCondicaoGravacao.DisposeOf;
      end;
    finally
      LCammposEditados.DisposeOf;
    end;
  finally
    LQueryExec.DisposeOf;
  end;
end;

procedure TControllerVendaBaseCadastro.Deletar;
var
  LQueryExec: TFDQuery;
  LField: TField;
begin
  LField := nil;
  LQueryExec := TFDQuery.Create(nil);
  try
    FConexao.SetarConexao(LQueryExec);
    for LField in FDataSetPrincipal.fields do
      if (pfInKey in LField.ProviderFlags) then
        Break;

    LQueryExec.SQL.Text := format(csSCRIPT_DELETE,[FTabelaNome, LField.FieldName, LField.FieldName]);
    MontarParametroQuery(LQueryExec, LField);
    LQueryExec.Prepare;
    LQueryExec.ExecSQL;
  finally
    LQueryExec.DisposeOf;
  end;
end;

function TControllerVendaBaseCadastro.GravarAutomatico: IModelBaseCadastro;
begin
  if ( FeAcaoAtual = taNovo) then
  begin
    PrepararGravar;
    FeAcaoAtual := taEditar;
  end;
end;

function TControllerVendaBaseCadastro.Cancelar: IModelBaseCadastro;
begin
  FDataSetPrincipal.Cancel;
end;

procedure TControllerVendaBaseCadastro.AtualizarPosicaoLeftEdit(AComponente: TComponent; var APosicaoLeft: Integer);
var
  LComponent: TControl absolute AComponente;
begin
  APosicaoLeft := APosicaoLeft + LComponent.Width + csPOSICAO_LEFT_EDIT;
end;

procedure TControllerVendaBaseCadastro.AtualizarPosicaoEdits(AComponente: TComponent;
      APaginaCadastro: TTabSheet; var APosicaoLeft: Integer; var APosicaoTop: Integer);
var
  LComponent: TControl absolute AComponente;
begin
  if APaginaCadastro.Width < (APosicaoLeft + LComponent.Width) then
  begin
    APosicaoLeft := APaginaCadastro.Left + csPOSICAO_LEFT_EDIT;
    APosicaoTop := APosicaoTop + (csPOSICAO_TOP_EDIT * 2);
  end;
end;

procedure TControllerVendaBaseCadastro.HabilitarBotoes;
begin
  FListaAcoes.Items[taNovo].Enabled    := ( FeAcaoAtual in csModEdicao);
  FListaAcoes.Items[taEditar].Enabled  := ( FeAcaoAtual in csModEdicao) and (FDataSetPrincipal.RecordCount > 0);
  FListaAcoes.Items[taExcluir].Enabled := ( FeAcaoAtual in csModEdicao) and (FDataSetPrincipal.RecordCount > 0);
  FListaAcoes.Items[taGravar].Enabled  := ( FeAcaoAtual in csModPersisten);
  FListaAcoes.Items[taCancelar].Enabled:= ( FeAcaoAtual in csModPersisten);
  SelecionarPagina;
end;

procedure TControllerVendaBaseCadastro.SelecionarCelula(Sender: TObject);
begin
  if FDataSetPrincipal.IsEmpty then
    Exit;
  FDataSetPrincipal.Edit;
  IniciarAcao(taEditar);
  
end;

procedure TControllerVendaBaseCadastro.SelecionarPagina;
begin
  if FeAcaoAtual in csVizualizacao then
    FpgPaginaBaseCadasro.ActivePage :=  FListaTabSheets.Items[csVizualizacao]
  else
    FpgPaginaBaseCadasro.ActivePage :=  FListaTabSheets.Items[csEdicao];
end;

function TControllerVendaBaseCadastro.SetGravaAutomatico(
  AProcedimento: TRotinaGravaAutomatico): IModelBaseCadastro;
begin
  Result := Self;
  FGravaAutomaticoProc := AProcedimento;
end;

function TControllerVendaBaseCadastro.ValidarCampoVisivel(
  const ANomeDoCampo: String): Boolean;
var
  LRTTIContexto: TRttiContext;
  LRTTITipo: TRttiType;
  LRTTIAtributo: TCustomAttribute;
begin
  Result := False;
  LRTTIContexto:= TRttiContext.Create;
  LRTTITipo := LRTTIContexto.GetType(FFormularioBase.ClassType);
  for LRTTIAtributo in LRTTITipo.GetAttributes do
    if LRTTIAtributo is TDesabilitaCamposAtributes then
      exit(TDesabilitaCamposAtributes(LRTTIAtributo).ValidarCampo(ANomeDoCampo));
end;

function TControllerVendaBaseCadastro.IniciarAcao(const AAcao: TTipoAcao; AResetDados: Boolean = false): IModelBaseCadastro;
begin
  result := Self;
  FeAcaoAtual := AAcao;
  HabilitarBotoes;
end;

procedure TControllerVendaBaseCadastro.CapturaChavePrimaria;
var
  LCampos: TField;
begin
  for LCampos in FDataSetPrincipal.Fields do
  begin
    if LCampos.datatype = ftAutoInc then
    begin
      FChavePrimariaBasePrincipal := LCampos;
      Exit;
    end;
  end;
end;

procedure TControllerVendaBaseCadastro.CriarEditsAutomatico;
var
  LCampo: TField;
  LPaginaCadastro: TTabSheet;
  LPosicaoTop, LPosicaoLeft: Integer;
begin
  if not FbGeraEdits then
    Exit;

  LPaginaCadastro:= FListaTabSheets.Items[csEdicao];
  LPosicaoTop := LPaginaCadastro.Top + csPOSICAO_TOP_EDIT;
  LPosicaoLeft:= LPaginaCadastro.Left + csPOSICAO_LEFT_EDIT;
  for LCampo in FDataSetPrincipal.Fields do
  begin
    if ValidarCampoVisivel(LCampo.FieldName) then
      Continue;

    case LCampo.datatype of
      ftString, ftWideString, ftInteger, ftLargeint, ftAutoInc, ftDate, ftDateTime, ftTimeStamp:
        ConstruirEdit(LPaginaCadastro, LCampo, LPosicaoTop, LPosicaoLeft);
      ftBoolean:
        ConstruirCheckBox(LPaginaCadastro, LCampo, LPosicaoTop, LPosicaoLeft);
      ftFloat, ftCurrency, ftBCD:
        ConstruirEdit(LPaginaCadastro, LCampo, LPosicaoTop, LPosicaoLeft);
    end;
  end;
end;

function TControllerVendaBaseCadastro.GetGravaAutomatico: TRotinaGravaAutomatico;
begin
  Result := PrepararGravar;
end;

procedure TControllerVendaBaseCadastro.ConstruirEdit(APaginaCadastro: TTabSheet;
  ACampo: TField; var APosicaoTop, APosicaoLeft: Integer);
var
  LLabelEdit: TDBLabeledEdit;
begin
  ACampo.ReadOnly              := (ACampo.FieldKind = fkLookup);
  LLabelEdit := TDBLabeledEdit.Create(APaginaCadastro);
  LLabelEdit.Parent             := APaginaCadastro;
  LLabelEdit.Name               := Format(csPREFIXO_EDIT,[ACampo.FieldName]);
  LLabelEdit.DataSource         := FDataSourcePrincipal;
  LLabelEdit.DataField          := ACampo.FieldName;
  LLabelEdit.EditLabel.Caption  := ACampo.DisplayLabel;
  LLabelEdit.Width              := (ACampo.DisplayWidth * 2) + csESPACO_CELULA;
  LLabelEdit.Enabled            := (not ACampo.ReadOnly) or 
                                   (pfInKey in ACampo.ProviderFlags);
  LLabelEdit.MaxLength          := ACampo.DisplayWidth;
  PosicionarComponenteFormCadastro(LLabelEdit, APaginaCadastro, APosicaoLeft, APosicaoTop);
end;

procedure TControllerVendaBaseCadastro.ConstruirCheckBox(APaginaCadastro: TTabSheet;
  ACampo: TField; var APosicaoTop, APosicaoLeft: Integer);
var
  LCheckBox: TDBCheckBox;
begin
  LCheckBox := TDBCheckBox.Create(APaginaCadastro);
  LCheckBox.Parent := APaginaCadastro;
  LCheckBox.Name := Format(csPREFIXO_CHECKBOX,[ACampo.FieldName]);
  LCheckBox.DataSource := FDataSourcePrincipal;
  LCheckBox.DataField := ACampo.FieldName;
  LCheckBox.Caption := ACampo.DisplayLabel;
  LCheckBox.Enabled := not ACampo.ReadOnly;
  LCheckBox.AlignWithMargins := True;
  LCheckBox.Width := (ACampo.DisplayWidth * 2) + csESPACO_CELULA;
  PosicionarComponenteFormCadastro(LCheckBox, APaginaCadastro, APosicaoLeft, APosicaoTop);
end;

procedure TControllerVendaBaseCadastro.AtribuirCaptionForm(const ACaptionForm: string);
begin
  FFormularioBase.Caption := ACaptionForm;
  if ACaptionForm.IsEmpty then
    FFormularioBase.Caption := csNAO_FOI_INFORMADO_CAPTION;

end;

procedure TControllerVendaBaseCadastro.ConfiguraAtibutos(ARTTIField: TRttiField);
var
  LRTTIAtributo: TCustomAttribute;
  LButoonAcao: TButton;
  LPagina: TTabSheet;
  procedure MontarAcaoAtricbuto;
  begin
    LButoonAcao := ARTTIField.GetValue(FFormularioBase).AsType<TButton>;
  end;
  procedure MontarOperacaoAtricbuto;
  begin
    LPagina := ARTTIField.GetValue(FFormularioBase).AsType<TTabSheet>;
    FListaTabSheets.Add(TOperacaoAtributes(LRTTIAtributo).TipoOperacao, LPagina);
  end;
begin
  for LRTTIAtributo in ARTTIField.GetAttributes do
  begin
    if LRTTIAtributo is TOperacaoAtributes then
      MontarOperacaoAtricbuto;

    if LRTTIAtributo is TAcoesAtributes then
      MontarAcaoAtricbuto;
  end;
end;

procedure TControllerVendaBaseCadastro.ConfigurarBasePrincipal;
var
  LCampo: TField;
  LColuna: TColumn;
begin
  FDataSourcePrincipal.DataSet := FDataSetPrincipal;
  FDataSetPrincipal.Active := True;
  for LCampo in FDataSetPrincipal.Fields do
  begin
    if ValidarCampoVisivel(LCampo.FieldName) then
      Continue;

    LColuna := FDBGrdListagem.Columns.Add;
    LColuna.Field := LCampo;
    LColuna.Title.Caption := LCampo.DisplayLabel;
    LColuna.Width := (LCampo.DisplayWidth * 2) + csESPACO_CELULA;
  end;
end;

procedure TControllerVendaBaseCadastro.ColetarAtributos;
var
  LRTTIContexto: TRttiContext;
  LRTTITipo: TRttiType;
  LRTTIField: TRttiField;
  LRTTIAtributo: TCustomAttribute;
  LDataSourceTemp: TDataSource;
begin
  LRTTIContexto:= TRttiContext.Create;
  LRTTITipo := LRTTIContexto.GetType(FFormularioBase.ClassType);
  for LRTTIAtributo in LRTTITipo.GetAttributes do
  begin
    if LRTTIAtributo is TTabelasAuxiliares then
    begin
      var oTabelasAuxiliares  := TTabelasAuxiliares(LRTTIAtributo);
      LDataSourceTemp         := TDataSource.Create(FFormularioBase);
      LDataSourceTemp.Name    := FConstrutor.PegarNomeDataSource(oTabelasAuxiliares.Tabela);
      LDataSourceTemp.DataSet := FConstrutor
                                  .CriarDataSets(oTabelasAuxiliares.DataSetAuxiliar,
                                                 oTabelasAuxiliares.Tabela);
      FListaDataSource.Add(LDataSourceTemp.Name, LDataSourceTemp);
    end;

    if LRTTIAtributo is TTituloFormAtributes then
    begin
      var oTituloFormAtributes := TTituloFormAtributes(LRTTIAtributo);
      AtribuirCaptionForm(oTituloFormAtributes.CaptionForm);
      FbGeraEdits           := oTituloFormAtributes.GeraEdits;
      FTabelaNome           := oTituloFormAtributes.Tabela;
      if not (oTituloFormAtributes.ClasseDataSetPrincipal = nil) then
        FDataSetPrincipal   := FConstrutor
                                .CriarDataSets(
                                            oTituloFormAtributes.ClasseDataSetPrincipal,
                                            oTituloFormAtributes.Tabela,
                                            FDataSetPrincipal,
                                            FListaDataSource,
                                            );
      FDataSourcePrincipal.OnStateChange := OnStateUpdatePrincipal;
    end;
  end;

  FpgPaginaBaseCadasro := LRTTITipo
                            .GetField('pgControleTelas')
                            .GetValue(FFormularioBase).AsType<TPageControl>;

  FDBGrdListagem      := LRTTITipo
                            .GetField('dbgListagem')
                            .GetValue(FFormularioBase).AsType<TDBGrid>;

  if Assigned(FDBGrdListagem) then
  begin
    FDBGrdListagem.DataSource := FDataSourcePrincipal;
    ConfigurarBasePrincipal;
    FDBGrdListagem.OnDblClick:= SelecionarCelula;
    FDBGrdListagem.OnKeyPress := OnDBGrdListagemKeyPress;
    FDBGrdListagem.OnKeyDown  := OnDBGrdListagemKeyDown;
  end;

  for LRTTIField in LRTTITipo.GetFields do
    ConfiguraAtibutos(LRTTIField);
end;

procedure TControllerVendaBaseCadastro.ColetarMetodoEditAtributos;
var
  LRTTIContexto: TRttiContext;
  LRTTITipo, oRTTITipoEdit: TRttiType;
  LRTTIMetodo: TRttiMethod;
  LRTTIProperty: TRttiProperty;
  LRTTIAtributo: TCustomAttribute;
  LHandlerMetodo: TMethod;
  LNomeComponent: string;
  LLabelEditComponente: TDBLabeledEdit;
begin
  LRTTIContexto:= TRttiContext.Create;
  LRTTITipo := LRTTIContexto.GetType(FFormularioBase.ClassType);
  for LRTTIMetodo in LRTTITipo.GetMethods do
    for LRTTIAtributo in LRTTIMetodo.GetAttributes do
      if LRTTIAtributo is TEventoOnExitAtributes then
      begin
        LNomeComponent := format(csPREFIXO_EDIT,[TEventoOnExitAtributes(LRTTIAtributo).NomeCampo]);
        if Assigned(FListaTabSheets.Items[csEdicao].FindComponent(LNomeComponent)) then
        begin
          LLabelEditComponente :=  TDBLabeledEdit(FListaTabSheets.Items[csEdicao].FindComponent(LNomeComponent));
          oRTTITipoEdit := LRTTIContexto.GetType(LLabelEditComponente.ClassType);
          LRTTIProperty := oRTTITipoEdit.GetProperty(csEVENTO_ONEXIT);
          LHandlerMetodo.Code := LRTTIMetodo.CodeAddress;
          LHandlerMetodo.Data := LLabelEditComponente;
          LRTTIProperty.SetValue(LLabelEditComponente,TValue.From<TNotifyEvent>(TNotifyEvent(LHandlerMetodo)));
        end;
        FbGeraEdits := TTituloFormAtributes(LRTTIAtributo).GeraEdits;
      end;
end;

procedure TControllerVendaBaseCadastro.InjetarAcoesBotoes;
var
  LRTTIContexto: TRttiContext;
  LRTTITipo: TRttiType;
  LRTTIField: TRttiField;
  LRTTIAtributo: TCustomAttribute;
  LBotaoEvento: TButton;
  LAcoesAtributes: TAcoesAtributes;
begin
  LRTTIContexto := TRttiContext.Create;
  LRTTITipo     := LRTTIContexto.GetType(FFormularioBase.ClassType);
  for LRTTIField in LRTTITipo.GetFields do
    for LRTTIAtributo in LRTTIField.GetAttributes do
      if LRTTIAtributo is TAcoesAtributes then
      begin
        LAcoesAtributes := (LRTTIAtributo as TAcoesAtributes);
        LBotaoEvento    := LRTTIField.GetValue(FFormularioBase).AsType<TButton>;
        if Assigned(LBotaoEvento) then
          LBotaoEvento.Action := FListaAcoes[LAcoesAtributes.TipoAcao]
      end;
end;

procedure TControllerVendaBaseCadastro.ColetarFrames;
var
  LRTTIContexto: TRttiContext;
  LRTTITipo: TRttiType;
  LRTTIField: TRttiField;
  LFrameDetalhes: TframeBase;
  LClasseControleFrame: iModelBaseCadastro;
  LDataSourceFrame: TDataSource;
  LDataSetFrame: TFDQuery;
begin
  LRTTIContexto:= TRttiContext.Create;
  LRTTITipo := LRTTIContexto.GetType(FFormularioBase.ClassType);
  for LRTTIField in LRTTITipo.GetFields do
    if LRTTIField.GetValue(FFormularioBase).IsObject and
       (LRTTIField.GetValue(FFormularioBase).AsObject is TFrame) then
    begin
      LFrameDetalhes               := LRTTIField.GetValue(FFormularioBase).AsType<TframeBase>;
      LClasseControleFrame         := LFrameDetalhes.ControllerFrame;
      LDataSourceFrame             := LClasseControleFrame.PegarDataSourcePrincpal;
      LDataSetFrame                := (LDataSourceFrame.DataSet as TFDQuery);
      LDataSetFrame.MasterSource   := FDataSourcePrincipal;
      LDataSetFrame.MasterFields   := FChavePrimariaBasePrincipal.FieldName;
      LDataSetFrame.IndexFieldNames:= FChavePrimariaBasePrincipal.FieldName;
      LClasseControleFrame.SetGravaAutomatico(GravarAutomatico);
      FListaBaseFrames.Add(LFrameDetalhes,LDataSourceFrame);
      LClasseControleFrame.IniciarAcao(taBrowse);
    end;
end;
procedure TControllerVendaBaseCadastro.OnDBGrdListagemKeyPress(Sender: TObject; var Key: Char);
var
  LDBGrid: TDBGrid absolute Sender;
begin
  if Key = #13 then
    FListaAcoes[taEditar].Execute;
end;

procedure TControllerVendaBaseCadastro.OnDBGrdListagemKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = vk_delete then
    FListaAcoes[taExcluir].Execute;
end;


end.
