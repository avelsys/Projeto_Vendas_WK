unit Vendas.Controller.Classes.BaseCadastroAtributo;

interface
Uses
  Vendas.Model.BaseCadastro, Data.DB;

type
  TTotalizadorFrame = class(TCustomAttribute)
  private
    FTabela: string;
    FChavePrimaria: string;
    FDataSetAuxiliar: TClass;
  public
    constructor Create(ATabela, AChavePrimaria: string; ADataSetAuxiliar: TClass);
    property Tabela: string read FTabela write FTabela;
    property ChavePrimaria: string read FChavePrimaria write FChavePrimaria;
    property DataSetAuxiliar: TClass read FDataSetAuxiliar write FDataSetAuxiliar;
  end;

  TTabelasAuxiliares = class(TCustomAttribute)
  private
    FTabela: string;
    FChavePrimaria: string;
    FDataSetAuxiliar: TClass;
  public
    constructor Create(ATabela, AChavePrimaria: string; ADataSetAuxiliar: TClass);
    property Tabela: string read FTabela write FTabela;
    property ChavePrimaria: string read FChavePrimaria write FChavePrimaria;
    property DataSetAuxiliar: TClass read FDataSetAuxiliar write FDataSetAuxiliar;
  end;

  TMontaCamposLooKup = class(TCustomAttribute)
  private
    FNomeTabelaFK: string;
    FChavePrimaria: string;
    FChaveEstrangeira: string;
    FCampoResult: string;
    FDisplayLabel: string;
    FTipoCampo: TFieldType;
    FTamanho: Integer;
  public
    constructor Create(ANomeTabelaFK, AChavePrimaria, AChaveEstrangeira,
      ACampoResult, ADisplayLabel: string; ATipoCampo: TFieldType; ATamanho: integer = 0);
    property NomeTabelaFK: string read FNomeTabelaFK write FNomeTabelaFK;
    property ChavePrimaria: string read FChavePrimaria write FChavePrimaria;
    property ChaveEstrangeira: string read FChaveEstrangeira write FChaveEstrangeira;
    property CampoResult: string read FCampoResult write FCampoResult;
    property DisplayLabel: string read FDisplayLabel write FDisplayLabel;
    property TipoCampo: TFieldType read FTipoCampo write FTipoCampo;
    property Tamanho: Integer read FTamanho write FTamanho;
  end;

  TMontaCamposDataSet = class(TCustomAttribute)
  private
    FNomeCampo: string;
    FDisplayLabel: string;
    FTipoCampo: TFieldType;
    FTamanho: Integer;
    FReadOnly: Boolean;
  public
    constructor Create(ANomeCampo, ADisplayLabel: string;
      ATipoCampo: TFieldType; ATamanho: integer = 0; AReadOnly: Boolean = false);
    property NomeCampo: string read FNomeCampo write FNomeCampo;
    property DisplayLabel: string read FDisplayLabel write FDisplayLabel;
    property TipoCampo: TFieldType read FTipoCampo write FTipoCampo;
    property Tamanho: Integer read FTamanho write FTamanho;
    property ReadOnly: Boolean read FReadOnly write FReadOnly;
  end;

  TDesabilitaCamposAtributes = class(TCustomAttribute)
  private
    FCampo: string;
  public
    constructor Create(ACampo: string);
    function ValidarCampo(const ACampoField: string): Boolean;
    property Campo: string read FCampo write FCampo;
  end;

  TAcoesAtributes = class(TCustomAttribute)
  private
    FTipoAcao: TTipoAcao;
  public
    constructor Create(AAcao: TTipoAcao);
    property TipoAcao: TTipoAcao read FTipoAcao write FTipoAcao;
  end;

  TOperacaoAtributes = class(TCustomAttribute)
  private
    FTipoOperacao: TArrayAcao;
  public
    constructor Create(AOperacao: TArrayAcao);
    property TipoOperacao: TArrayAcao read FTipoOperacao write FTipoOperacao;
  end;

  TTituloFormAtributes = class(TCustomAttribute)
  private
    FCaptionForm: String;
    FGeraEdits: Boolean;
    FClasseDataSetPrincipal: TClass;
    FTabela: string;
  public
    constructor Create(ACaptionForm, ATabela: String;
      ADataSetPrincipal: TClass; AGeraEdits: boolean = false);
    property CaptionForm: String read FCaptionForm write FCaptionForm;
    property Tabela: string read FTabela write FTabela;
    property ClasseDataSetPrincipal: TClass read FClasseDataSetPrincipal write FClasseDataSetPrincipal;
    property GeraEdits: Boolean read FGeraEdits write FGeraEdits;

  end;

  TEventoOnExitAtributes = class(TCustomAttribute)
  private
    FNomeCampo: String;
    FDicionarioDataSource: TDicionarioDataSource;
  public
    constructor Create(ANomeCampo: String; ADicionarioDataSource: TDicionarioDataSource = nil);
    property NomeCampo: String read FNomeCampo write FNomeCampo;
    property DicionarioDataSource: TDicionarioDataSource read FDicionarioDataSource write FDicionarioDataSource;
  end;

implementation

{ TAcoesAtributes }

constructor TAcoesAtributes.Create(AAcao: TTipoAcao);
begin
  FTipoAcao := AAcao;
end;

{ TOperacaoAtributes }

constructor TOperacaoAtributes.Create(AOperacao: TArrayAcao);
begin
  FTipoOperacao := AOperacao;
end;

{ TTituloFormAtributes }

constructor TTituloFormAtributes.Create(ACaptionForm, ATabela: String;
      ADataSetPrincipal: TClass; AGeraEdits: boolean = false);
begin
  FCaptionForm := ACaptionForm;
  FTabela := ATabela;
  FGeraEdits:= AGeraEdits;
  FClasseDataSetPrincipal:= ADataSetPrincipal;
end;

{ TEventoOnExitAtributes }

constructor TEventoOnExitAtributes.Create(ANomeCampo: String;
  ADicionarioDataSource: TDicionarioDataSource = nil);
begin
  FNomeCampo := ANomeCampo;
  FDicionarioDataSource := ADicionarioDataSource;
end;

{ TDesabilitaCamposAtributes }

constructor TDesabilitaCamposAtributes.Create(ACampo: string);
begin
  FCampo := ACampo;
end;

function TDesabilitaCamposAtributes.ValidarCampo(
  const ACampoField: string): Boolean;
begin
  result :=  ACampoField = FCampo;
end;

{ TMontaCamposDataSet }

constructor TMontaCamposDataSet.Create(ANomeCampo, ADisplayLabel: string;
      ATipoCampo: TFieldType; ATamanho: integer = 0; AReadOnly: Boolean = false);
begin
  FNomeCampo   := ANomeCampo;
  FDisplayLabel:= ADisplayLabel;
  FTipoCampo   := ATipoCampo;
  FTamanho     := ATamanho;
  FReadOnly    := AReadOnly;
end;

{ TMontaCamposLooKup }

constructor TMontaCamposLooKup.Create(ANomeTabelaFK, AChavePrimaria, AChaveEstrangeira,
  ACampoResult, ADisplayLabel: string; ATipoCampo: TFieldType; ATamanho: integer = 0);
begin
  FNomeTabelaFK     := ANomeTabelaFK;
  FChavePrimaria    := AChavePrimaria;
  FChaveEstrangeira := AChaveEstrangeira;
  FCampoResult      := ACampoResult;
  FDisplayLabel     := ADisplayLabel;
  FTipoCampo        := ATipoCampo;
  FTamanho          := ATamanho;
end;

{ TTabelasAuxiliares }

constructor TTabelasAuxiliares.Create(ATabela, AChavePrimaria: string; ADataSetAuxiliar: TClass);
begin
  FTabela         := ATabela;
  FChavePrimaria  := AChavePrimaria;
  FDataSetAuxiliar:= ADataSetAuxiliar;
end;

end.
